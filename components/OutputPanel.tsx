import React from 'react';
import { Icon } from './Icon';

interface OutputPanelProps {
    images: string[] | null;
    history: string[];
    isLoading: boolean;
    error: string | null;
    onCreateNew: () => void;
    onSelectForEditing: (imageUrl: string) => void;
}

const OutputPanel: React.FC<OutputPanelProps> = ({ images, history, isLoading, error, onCreateNew, onSelectForEditing }) => {
    return (
        <div className="bg-[#1E293B] rounded-lg h-full flex flex-col p-4">
            <div className="w-full h-full border-2 border-dashed border-slate-700 rounded-lg flex flex-col p-4">
                {isLoading && (
                    <div className="m-auto flex flex-col items-center justify-center gap-4 text-center">
                        <div className="w-12 h-12 border-4 border-slate-600 border-t-blue-500 rounded-full animate-spin"></div>
                        <p className="text-slate-400">AI đang vẽ, vui lòng chờ trong giây lát...</p>
                    </div>
                )}
                {!isLoading && error && (
                    <div className="m-auto flex flex-col items-center justify-center gap-4 text-center text-red-400">
                         <svg xmlns="http://www.w3.org/2000/svg" className="h-12 w-12" fill="none" viewBox="0 0 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        <p className="font-semibold">Đã xảy ra lỗi</p>
                        <p className="text-sm">{error}</p>
                    </div>
                )}
                {!isLoading && !error && images && images.length > 0 && (
                     <div className="flex flex-col w-full h-full min-h-0">
                        {/* Header */}
                        <div className="flex-shrink-0 flex justify-between items-center mb-4">
                             <button
                                onClick={onCreateNew}
                                className="inline-flex items-center gap-2 px-4 py-2 bg-slate-700 text-white font-semibold rounded-lg hover:bg-slate-600 transition-colors duration-200"
                            >
                                <Icon name="plus-circle" className="w-5 h-5" />
                                <span>Tạo ảnh mới</span>
                            </button>
                        </div>
                        
                        {/* Image viewport */}
                        <div className="flex-grow relative min-h-0">
                            <div className="absolute inset-0 overflow-y-auto pr-2">
                                <div className={`grid grid-cols-1 ${images.length > 1 ? 'md:grid-cols-2' : ''} gap-4`}>
                                    {images.map((imageSrc, index) => (
                                        <div key={index} className="relative group w-full flex items-center justify-center bg-black/20 rounded-md">
                                            <img src={imageSrc} alt={`Generated by AI ${index + 1}`} className="max-w-full h-auto object-contain rounded-md" />
                                            <a
                                                href={imageSrc}
                                                download={`ai-image-${index + 1}.png`}
                                                className="absolute bottom-2 right-2 bg-black/60 text-white rounded-full p-2 opacity-0 group-hover:opacity-100 transition-opacity hover:bg-black/80"
                                                aria-label="Download image"
                                            >
                                                <Icon name="download" className="w-5 h-5" />
                                            </a>
                                        </div>
                                    ))}
                                </div>
                            </div>
                        </div>

                        {/* History footer */}
                        {history.length > 1 && (
                            <div className="flex-shrink-0 pt-4 mt-4 border-t border-slate-700">
                                <h3 className="text-sm font-semibold text-slate-300 mb-3">Lịch sử chỉnh sửa</h3>
                                <div className="flex gap-3 overflow-x-auto pb-2">
                                    {history.map((histImage, index) => (
                                        <button 
                                            key={index}
                                            onClick={() => onSelectForEditing(histImage)}
                                            className="flex-shrink-0 w-20 h-20 rounded-md overflow-hidden border-2 border-transparent hover:border-blue-500 focus:outline-none focus:border-blue-500 transition"
                                            aria-label={`Select image version ${index + 1} for editing`}
                                        >
                                            <img src={histImage} alt={`History ${index + 1}`} className="w-full h-full object-cover" />
                                        </button>
                                    ))}
                                </div>
                            </div>
                        )}
                    </div>
                )}
                {!isLoading && !error && (!images || images.length === 0) && (
                    <div className="m-auto flex flex-col items-center justify-center gap-4 text-center">
                        <div className="p-4 bg-slate-800 rounded-full">
                           <Icon name="image" className="w-10 h-10 text-slate-500"/>
                        </div>
                        <h2 className="text-lg font-semibold text-white">Hình ảnh của bạn sẽ xuất hiện ở đây</h2>
                        <p className="text-sm text-slate-400 max-w-xs">Nhập mô tả và chọn phong cách để bắt đầu quá trình sáng tạo.</p>
                    </div>
                )}
            </div>
        </div>
    );
};

export default OutputPanel;